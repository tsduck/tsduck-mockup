#-----------------------------------------------------------------------------
#
#  TSDuck - The MPEG Transport Stream Toolkit
#  Copyright (c) 2005-2025, Thierry Lelegard
#  BSD-2-Clause license, see LICENSE.txt file or https://tsduck.io/license
#
#  GitHub Actions configuration file : Release subworkflow for Windows.
#  Build, install and test TSDuck on Windows. Build for x64 and/or arm64.
#  Upload installation packages as workflow artifacts.
#  Do not start this workflow manually, this is a subworkflow of release.yml.
#
#-----------------------------------------------------------------------------

name: Release (Windows)

on:
  workflow_call:
    inputs:
      build:
        description: 'If false, do not build anything, skip that subworkflow'
        type: boolean
        required: false
        default: false
      tag:
        description: 'Tag to rebuild, empty to build latest commit'
        type: string
        required: false
        default: ''
      build_x64:
        description: 'Build installers for Intel x64'
        type: boolean
        required: false
        default: true
      build_arm64:
        description: 'Build installers for Arm64'
        type: boolean
        required: false
        default: false
      runner:
        description: 'GitHub runner, typically windows-latest (x64) or windows-11-arm'
        type: string
        required: false
        default: 'windows-latest'

jobs:
  build:
    if: inputs.build && (inputs.build_x64 || inputs.build_arm64)
    name: Build on ${{ inputs.runner }}
    runs-on: ${{ inputs.runner }}
    steps:

    - name: Get TSDuck repo
      uses: actions/checkout@master
      with:
        # Checkout tag. If empty, use the default branch.
        ref: ${{ inputs.tag }}

    - name: Install dependencies
      run: |
        Write-Output "ARCH=${env:PROCESSOR_ARCHITECTURE}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        scripts\install-prerequisites.ps1 -GitHubActions -NoDoxygen -NoPause

    - name: Build
      run: |
        pkg\nsis\build-installer.ps1 -Win64:$${{ inputs.build_x64 }} -Arm64:$${{ inputs.build_arm64 }} -NoLowPriority -NoPause

    - name: List installers
      run: |
        Get-ChildItem pkg\installers
        Write-Output ""
        if ($${{ inputs.build_x64 }}) {
            $TSWin64 = (Get-ChildItem pkg\installers\TSDuck-Win64-*.exe).Name
            $TSWin64P = (Get-ChildItem pkg\installers\TSDuck-Win64-*-Portable.zip).Name
            Write-Output "Win64 installer: $TSWin64"
            Write-Output "Win64 portable: $TSWin64P"
            Write-Output "TSWin64=$TSWin64"   | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            Write-Output "TSWin64P=$TSWin64P" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        }
        if ($${{ inputs.build_arm64 }}) {
            $TSArm64 = (Get-ChildItem pkg\installers\TSDuck-Arm64-*.exe).Name
            $TSArm64P = (Get-ChildItem pkg\installers\TSDuck-Arm64-*-Portable.zip).Name
            Write-Output "Arm64 installer: $TSArm64"
            Write-Output "Arm64 portable: $TSArm64P"
            Write-Output "TSArm64=$TSArm64"   | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            Write-Output "TSArm64P=$TSArm64P" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        }
        # Will check later if installation is possible, false by default.
        Write-Output "INSTALLED=false" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Install Win64 installers
      if: inputs.build_x64 && env.ARCH == 'AMD64'
      run: |
        Start-Process -Wait -FilePath pkg/installers/${{ env.TSWin64 }} -ArgumentList @("/S", "/all=true")
        Write-Output "INSTALLED=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Install Arm64 installers
      if: inputs.build_arm64 && env.ARCH == 'ARM64'
      run: |
        Start-Process -Wait -FilePath pkg/installers/${{ env.TSArm64 }} -ArgumentList @("/S", "/all=true")
        Write-Output "INSTALLED=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Propagate environment
      if: env.INSTALLED
      run: |
        $tsduck     = [System.Environment]::GetEnvironmentVariable("TSDUCK",     [System.EnvironmentVariableTarget]::Machine)
        $path       = [System.Environment]::GetEnvironmentVariable("Path",       [System.EnvironmentVariableTarget]::Machine)
        $pythonpath = [System.Environment]::GetEnvironmentVariable("PYTHONPATH", [System.EnvironmentVariableTarget]::Machine)
        $classpath  = [System.Environment]::GetEnvironmentVariable("CLASSPATH",  [System.EnvironmentVariableTarget]::Machine)
        Write-Output "TSDUCK=$tsduck"         | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Output "Path=$path"             | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Output "PYTHONPATH=$pythonpath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Output "CLASSPATH=$classpath"   | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Identify installed version
      if: env.INSTALLED
      run: |
        Write-Output "==== TSDuck version"
        tsversion --version=all
        Write-Output "==== TSDuck supported features"
        tsversion --support all
        Write-Output "==== TSDuck plugins"
        tsp --list-plugins

    - name: Download test suite
      if: github.repository == 'tsduck/tsduck'
      run: |
        # Try to download '<repo>-test' from the pull request owner, if there is one.
        $ErrorActionPreference = 'SilentlyContinue'
        $ProgressPreference = 'SilentlyContinue'
        Invoke-WebRequest -UseBasicParsing -OutFile test.zip -Uri https://github.com/${{ github.repository }}-test/archive/master.zip
        [void] (New-Item -Type Directory -Force tmp)
        Expand-Archive test.zip -DestinationPath tmp -Force
        Move-Item tmp\* ..\tsduck-test -Force

    - name: Run test suite on installed version
      if: github.repository == 'tsduck/tsduck'
      shell: bash
      run: |
        cd ../tsduck-test
        ./run-all-tests.sh && status=$? || status=$?
        for f in $(find tmp -name '*.diff'); do
            echo "==== $f";
            cat "$f"
        done
        exit $status

    - name: Publish Win64 package
      if: inputs.build_x64
      uses: actions/upload-artifact@v4
      with:
        name: tsduck-windows-x64
        path: pkg/installers/${{ env.TSWin64 }}
        retention-days: 30

    - name: Publish Win64 portable package
      if: inputs.build_x64
      uses: actions/upload-artifact@v4
      with:
        name: tsduck-windows-portable-x64
        path: pkg/installers/${{ env.TSWin64P }}
        retention-days: 30

    - name: Publish Arm64 package
      if: inputs.build_arm64
      uses: actions/upload-artifact@v4
      with:
        name: tsduck-windows-arm64
        path: pkg/installers/${{ env.TSArm64 }}
        retention-days: 30

    - name: Publish Arm64 portable package
      if: inputs.build_arm64
      uses: actions/upload-artifact@v4
      with:
        name: tsduck-windows-portable-arm64
        path: pkg/installers/${{ env.TSArm64P }}
        retention-days: 30
